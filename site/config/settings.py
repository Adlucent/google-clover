"""
Django settings for Default project.

Generated by 'django-admin startproject' using Django 1.11.29.

For more information on this file, see
https://docs.djangoproject.com/en/1.11/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.11/ref/settings/
"""

import os
from datetime import timedelta

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

GRAPPELLI_ADMIN_TITLE = 'Admin'
# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.11/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ['SECRET_KEY']

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ['DEBUG'] == 'True'  # environment vars are strings. "convert" to boolean. lol, Python

GCP_PROJECT_ID = 'clover-gcp'

ALLOWED_HOSTS = [
    f'{GCP_PROJECT_ID}.uc.r.appspot.com',  # APP Engine domain
    '0.0.0.0',    # for local testing
    '127.0.0.1',  # for local testing
    'localhost',  # for local testing
]


# Application definition
INSTALLED_APPS = [
    'grappelli',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django_countries',

    # Third-Party Apps
    'rest_framework',
    'rest_framework.authtoken',
    'rest_framework_api_key',

    # Local Apps
    'apps.clover',
]

COUNTRIES_FIRST = [
    'US',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

X_FRAME_OPTIONS = 'SAMEORIGIN'
ROOT_URLCONF = 'config.urls'
WSGI_APPLICATION = 'config.wsgi.application'

TEMPLATES = [
    {
        'BACKEND' : 'django.template.backends.django.DjangoTemplates',
        'DIRS'    : [
            os.path.join(BASE_DIR, 'templates')
        ],  # global templates directory (in root directory where manage.py is)
        'APP_DIRS': True,
        'OPTIONS' : {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

# Database
# https://docs.djangoproject.com/en/1.11/ref/settings/#databases
if "DB_HOST" in os.environ:
    DATABASES = {
        'default': {
            'ENGINE'  : 'django.db.backends.postgresql',
            'HOST'    : os.environ['DB_HOST'],
            'PORT'    : os.environ['DB_PORT'],
            'NAME'    : os.environ['DB_NAME'],
            'USER'    : os.environ['DB_USER'],
            'PASSWORD': os.environ['DB_PASSWORD']
        }
    }

# Password validation
# https://docs.djangoproject.com/en/1.11/ref/settings/#auth-password-validators
AUTH_PASSWORD_VALIDATORS = [
    # {
    #    'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    # },
    # {
    #    'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    # },
    # {
    #    'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    # },
    # {
    #    'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    # },
]

# SIMPLE JWT OPTIONS
SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME' : timedelta(minutes=60),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=1),
}

# REST Framework
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ],
}

# if on prod....
if not DEBUG:
    from google.cloud import logging

    # StackDriver setup
    client = logging.Client()
    # Connects the logger to the root logging handler; by default
    # this captures all logs at INFO level and higher
    client.setup_logging()
    LOGGING = {
        'version' : 1,
        'handlers': {
            'stackdriver': {
                'class' : 'google.cloud.logging.handlers.CloudLoggingHandler',
                'client': client
            }
        },
        'loggers' : {
            '': {
                'handlers': ['stackdriver'],
                'level'   : 'INFO',
                # 'name'   : os.getenv('ENVIRONMENT_NAME')  # After adding the name parameter, you can use
                                                            # logName="projects/<project_id>/logs/<name>" constraint on
                                                            # StackDriver logging interface to filter
                                                            # by name.
            }
        },
    }

# LOGGING
# import sys
# from google.cloud import logging as google_cloud_logging

# log_client = google_cloud_logging.Client()

# LOGGING = {
#     'version'                 : 1,
#     'disable_existing_loggers': False,
#     'handlers'                : {
#         'console'            : {
#             'level' : 'INFO',
#             'class' : 'logging.StreamHandler',
#             'stream': sys.stdout,
#         },
#         'mail_admins'        : {
#             'level': 'ERROR',
#             'class': 'django.utils.log.AdminEmailHandler'
#         },
#         'stackdriver_logging': {
#             'class' : 'google.cloud.logging.handlers.CloudLoggingHandler',
#             'client': log_client
#         }
#     },
#     'loggers'                 : {
#         'django'        : {
#             'handlers' : ['console', 'stackdriver_logging'],
#             'level'    : 'DEBUG',
#             'propagate': True,
#         },
#         'django.request': {
#             'handlers': [
#                 'stackdriver_logging',
#                 'mail_admins'
#             ],
#             'level'   : 'ERROR',
#         }
#     },
# }

# ,
# 'stackdriver_error_reporting': {
#    'level': 'ERROR',
#    'class': 'gcp_utils.stackdriver_logging.StackdriverErrorHandler',
# }


# Internationalization
# https://docs.djangoproject.com/en/1.11/topics/i18n/
LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.11/howto/static-files/
STATIC_URL = os.environ['STATIC_URL']

if "STATIC_ROOT" in os.environ:
    STATIC_ROOT = os.environ['STATIC_ROOT']
else:
    STATIC_ROOT = os.path.join(BASE_DIR, 'static')

STATICFILES_DIRS = [
    # TODO: configure the name and path to your development static directory
    # os.path.join(BASE_DIR, './static'),  # static directory (in the top level directory) for local testing
]

DEFAULT_FILE_STORAGE = 'storages.backends.gcloud.GoogleCloudStorage'
GS_BUCKET_NAME = f'{GCP_PROJECT_ID}_file_uploads'
# MEDIA_URL = '/asset-viewer/'
# MEDIA_ROOT = BASE_DIR + '/asset-viewer'

# Generated by Django 3.2.12 on 2022-02-14 06:45

import datetime
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Application',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=64, unique=True)),
                ('active', models.BooleanField(default=True)),
            ],
        ),
        migrations.CreateModel(
            name='ApplicationAPIKey',
            fields=[
                ('id', models.CharField(editable=False, max_length=100, primary_key=True, serialize=False, unique=True)),
                ('prefix', models.CharField(editable=False, max_length=8, unique=True)),
                ('hashed_key', models.CharField(editable=False, max_length=100)),
                ('created', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('name', models.CharField(default=None, help_text='A free-form name for the API key. Need not be unique. 50 characters max.', max_length=50)),
                ('revoked', models.BooleanField(blank=True, default=False, help_text='If the API key is revoked, clients cannot use it anymore. (This cannot be undone.)')),
                ('expiry_date', models.DateTimeField(blank=True, help_text='Once API key expires, clients cannot use it anymore.', null=True, verbose_name='Expires')),
                ('application', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='api_key', to='clover.application')),
            ],
            options={
                'verbose_name': 'Application API key',
                'verbose_name_plural': 'Application API keys',
                'ordering': ['-application', '-created'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Client',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=64, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='TrainingDataSet',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=64, unique=True)),
                ('description', models.CharField(max_length=256)),
                ('location', models.CharField(blank=True, help_text='This field is not required but might help you keep track of your data and which training data set you are using.  For example, this can be a Big Query table', max_length=256)),
                ('start_date', models.DateField(help_text='Enter the initial date contained for the data that was used to create the training data set')),
                ('end_date', models.DateField(help_text='Enter the last date contained for the data that was used to create the training data set')),
                ('update_date', models.DateField(default=datetime.date.today, help_text='Enter the date the training data set was created or updated.')),
                ('data_fields', models.JSONField(help_text='Enter all of fields that are contained in your data set along with their data type.')),
                ('client', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='client_data', to='clover.client')),
            ],
            options={
                'verbose_name': 'Training Data Set',
                'verbose_name_plural': 'Training Data Sets',
            },
        ),
        migrations.CreateModel(
            name='Config',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=64, unique=True)),
                ('predicted_metric', models.CharField(max_length=64)),
                ('best_model', models.IntegerField(choices=[(0, 'Root Mean Squared Error'), (1, 'Mean Absolute Error'), (2, 'Mean Absolute Percentage Error')], help_text='Choose the default method to evaluate how clover will choose the best possible model')),
                ('segment', models.CharField(blank=True, help_text='Enter value to help organize your different models if you want', max_length=64)),
                ('time_period', models.CharField(help_text='Enter description of what the horizon of the prediction for the model is.  For example, 3-Month LTV, 1-Year LTV, etc...', max_length=64)),
                ('app', models.ManyToManyField(related_name='api_key_config', to='clover.ApplicationAPIKey')),
                ('client', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='client_config', to='clover.client')),
                ('data_set', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='data_config', to='clover.trainingdataset')),
            ],
            options={
                'verbose_name': 'Configuration',
                'verbose_name_plural': 'Configurations',
            },
        ),
        migrations.CreateModel(
            name='CLVModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=64, unique=True)),
                ('description', models.CharField(blank=True, max_length=256)),
                ('type', models.IntegerField(choices=[(0, 'VERTEX AI'), (1, 'PARETO / NBD'), (2, 'BG / NBD')])),
                ('data_fields', models.JSONField()),
                ('training_date', models.DateField()),
                ('metric', models.CharField(blank=True, help_text='Name of Predicted Metric at the time of prediction. This will enable cloverto predict future value of the metric', max_length=64)),
                ('address', models.JSONField(verbose_name='Model API Parameters')),
                ('api_key', models.JSONField(verbose_name='Model Service Account Credentials')),
                ('mae', models.FloatField(verbose_name='Mean Absolute Error')),
                ('mape', models.FloatField(help_text='Percent is entered from 0 - 100 %', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(100.0)], verbose_name='Mean Absolute Percentage Error')),
                ('rmse', models.FloatField(verbose_name='Root Mean Squared Error')),
                ('client', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='client_clvmodel', to='clover.client')),
                ('config', models.ManyToManyField(related_name='config_clvmodel', to='clover.Config')),
            ],
            options={
                'verbose_name': 'CLV Model',
                'verbose_name_plural': 'CLV Models',
            },
        ),
    ]
